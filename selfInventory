#!/usr/bin/python

import json
from json import JSONEncoder
import system
import os


class MyEncoder(JSONEncoder):
    def default(self, o):
        return o.__dict__


class Color:
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


class Folder:
    def __init__(self, name, id, parent, child):
        self.name = name
        self.id = id
        self.parent = parent
        self.child = child

    def folder_name(self):
        return self.name

    def folder_id(self):
        return self.id

    def folder_parent(self):
        return self.parent

    def folder_child(self):
        return self.child

    def folder_json_structure(self):
        json_folder = {'name': self.name, 'id': self.id, 'parent': self.parent, 'child': self.child}
        return json_folder


def main():
    clear()
    list_folders = []
    list_ids = []
    init_main(list_folders,list_ids)
    run_menu(list_folders,list_ids)


def run_menu(list_folders,list_ids):
    choice = banner_and_menu()

    if choice == '1':
        show_inventory(list_folders)
        print
        print
        raw_input("     Press Enter to continue...")
        clear()
        run_menu(list_folders,list_ids)
    elif choice == '2':
        print
        print
        print '     Under development.'
        raw_input("     Press Enter to continue...")
        clear()
        run_menu(list_folders,list_ids)
    elif choice == '3':
        folder = Folder('f10', 'f10', "f7", [])
        add_folder(folder, list_folders)
        print
        print
        print 'folder: ' + folder.name + ' created.'
        run_menu(list_folders,list_ids)
        raw_input("     Press Enter to continue...")
        clear()
    elif choice == '4':
        init_inventory(list_folders)
        run_menu(list_folders,list_ids)
        raw_input("     Press Enter to continue...")
        clear()
    elif choice == "0":
        print
        clear()
    else:
        print("     You must only select either 1,2,3 or 4.")
        print("     Please try again")
        run_menu(list_folders, list_ids)

def banner_and_menu():
    print(
            Color.BLUE + Color.BOLD + """               _  __""" + Color.CYAN + Color.BOLD + """ ___                      _                   """ + Color.END)
    print(
            Color.BLUE + Color.BOLD + """      ___  ___| |/ _""" + Color.CYAN + Color.BOLD + """|_ _|_ ____   _____ _ __ | |_ ___  _ __ _   _""" + Color.END)
    print(
            Color.BLUE + Color.BOLD + """     / __|/ _ \ | |_ """ + Color.CYAN + Color.BOLD + """| || '_ \ \ / / _ \ '_ \| __/ _ \| '__| | | |""" + Color.END)
    print(
            Color.BLUE + Color.BOLD + """     \__ \  __/ |  _|""" + Color.CYAN + Color.BOLD + """| || | | \ V /  __/ | | | || (_) | |  | |_| |""" + Color.END)
    print(
            Color.BLUE + Color.BOLD + """     |___/\___|_|_| """ + Color.CYAN + Color.BOLD + """|___|_| |_|\_/ \___|_| |_|\__\___/|_|   \__, |""" + Color.END)
    print(
            Color.BLUE + Color.BOLD + """                     """ + Color.CYAN + Color.BOLD + """                                        |___/ (beta v1.0 by sancha91)""" + Color.END)

    choice = raw_input("""
                             1: Show your inventory
                             2: Add new host
                             3: Add new folder
                             4: Init from scratch
                             0: Quit

                             Please enter your choice: """)
    return choice

def init_main(list_folders,list_ids):
    for i in range(len(os.listdir(os.curdir))):
        if os.listdir(os.curdir)[i] == '.inventory.json':
            with open('.inventory.json') as json_file:
                data = json.load(json_file)
                list_folders.append(data)
                getlist_ids(list_folders[0]['folder'],list_ids)


def show_inventory(list_folders):
    for i in range(len(os.listdir(os.curdir))):
        if os.listdir(os.curdir)[i] == '.inventory.json':
            with open('.inventory.json') as json_file:
                data = json.load(json_file)
                for root in data['folder']:
                    list_folders.append(root)
                    print
                    print
                    print('     '  + Color.BOLD + Color.PURPLE + root['name'] + Color.END)
                    data_iteration(root, 1, '',list_folders)
            break

def data_iteration(folder, i, printer,list_folders):
    tabulate = '                    '
    printer += (Color.CYAN + '     |' + Color.END) * i
    for child in folder['child']:
        list_folders[0]['child'] = folder
        child_id = child['id']
        if 'h' in child['id']:
            print('     ' + printer)
            print('     ' + printer + Color.CYAN + '--- ' + Color.END + child['name'] + ' ' + Color.YELLOW + Color.BOLD + child['url'] + Color.END)
        else:
            print('     ' + printer)
            print('     ' + printer + Color.CYAN + '--- ' + Color.END + Color.RED + Color.BOLD + child['name'] + Color.END)
            data_iteration(child, i, printer, list_folders)


def init_inventory(list_folders):
    flag = 0
    for i in range(len(os.listdir(os.curdir))):
        if os.listdir(os.curdir)[i] == '.inventory.json':
            print 'The project has been already initialised.'
            flag = 1
            break

    if flag != 1:
        root_folder = Folder("User sessions", "f0", "", [])
        add_folder(root_folder,list_folders)

def add_host(name, url, parent):
    data = {'hosts': []}
    data['host'].append({
        'name': name,
        'url': url,
        'parent': parent
    })

def add_folder(folder,list_folders):
    if "f0" in folder.id:
        list_folders.append(folder)
        data = {'folder': []}
        temp = folder.folder_json_structure()
        data['folder'].append(temp)
        with open('.inventory.json', 'w') as outfile:
            json.dump(data, outfile)
    else:
        indexpath = []
        lvl = whoismyparent_level(list_folders[0]['folder'],folder,0)
        get_index_path(list_folders[0]['folder'],folder,indexpath)
        indexpath.reverse()

        print 'index_path:'+ str(indexpath)
        print 'level:' + str(lvl)

        with open('.inventory.json') as json_file:
            data = json.load(json_file)
            data_to_append = folder.folder_json_structure()
            appendtojson(data['folder'], indexpath,0,data_to_append)
        with open('.inventory.json', 'w') as outfile:
            json.dump(data, outfile)

def appendtojson(data, indexpath,i,data_to_append):
    if i+1 == len(indexpath):
        data[indexpath[i]]['child'].append(data_to_append)
    else:
        appendtojson(data[indexpath[i]]['child'],indexpath,i+1,data_to_append)

def whoismyparent_index(list_folders,folder,index,index_path):
    for i in range(len(list_folders)):
        if folder.parent == list_folders[i]['id']:
            index_path.append(i)
            return i
        else:
            index = whoismyparent_index(list_folders[i]['child'], folder, index,index_path)

    return index


def get_index_path(list_folders,folder,index_path):
    samepath = False
    for i in range(len(list_folders)):
        if folder.parent == list_folders[i]['id']:
            index_path.append(i)
            return True
        else:
            samepath = get_index_path(list_folders[i]['child'],folder,index_path)
            if len(index_path) > 0 and samepath:
                index_path.append(i)
                return True


def whoismyparent_level(list_folders,folder,index):
    for i in range(len(list_folders)):
        if folder.parent == list_folders[i]['id']:
            return index
        else:
            return whoismyparent_level(list_folders[i]['child'], folder, index+1)
    return index


def getlist_ids(data,list_ids):
    for i in range(len(data)):
        list_ids.append(data[i]['id'])
        getlist_ids(data[i]['child'],list_ids)

def clear():
    os.system('cls' if os.name == 'nt' else 'clear')

if __name__ == "__main__":
    main()
